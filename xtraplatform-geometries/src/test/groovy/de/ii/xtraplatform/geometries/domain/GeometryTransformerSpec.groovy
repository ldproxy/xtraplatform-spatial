/*
 * Copyright 2022 interactive instruments GmbH
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package de.ii.xtraplatform.geometries.domain

import de.ii.xtraplatform.crs.domain.EpsgCrs
import de.ii.xtraplatform.crs.domain.OgcCrs
import de.ii.xtraplatform.geometries.domain.transform.ClampToEllipsoid
import de.ii.xtraplatform.geometries.domain.transform.ImmutableSimplifyLine
import de.ii.xtraplatform.geometries.domain.transform.MinMaxDeriver
import spock.lang.Specification

import java.math.RoundingMode

class GeometryTransformerSpec extends Specification {

    Geometry solid = PolyhedralSurface.of(List.of(
            Polygon.of(List.of(PositionList.of(Axes.XYZ, new double[]{280414.631, 5660090.756, 40.255, 280414.631, 5660088.454, 40.255, 280414.631, 5660088.454, 32.967, 280414.631, 5660090.756, 32.967, 280414.631, 5660090.756, 40.255})), Optional.of(EpsgCrs.of(25832, 7837))),
            Polygon.of(List.of(PositionList.of(Axes.XYZ, new double[]{280414.631, 5660088.454, 40.255, 280405.623, 5660088.454, 33.256, 280405.623, 5660088.454, 32.967, 280414.631, 5660088.454, 32.967, 280414.631, 5660088.454, 40.255})), Optional.of(EpsgCrs.of(25832, 7837))),
            Polygon.of(List.of(PositionList.of(Axes.XYZ, new double[]{280405.623, 5660088.454, 33.256, 280405.623, 5660090.756, 33.256, 280405.623, 5660090.756, 32.967, 280405.623, 5660088.454, 32.967, 280405.623, 5660088.454, 33.256})), Optional.of(EpsgCrs.of(25832, 7837))),
            Polygon.of(List.of(PositionList.of(Axes.XYZ, new double[]{280405.623, 5660090.756, 33.256, 280414.631, 5660090.756, 40.255, 280414.631, 5660090.756, 32.967, 280405.623, 5660090.756, 32.967, 280405.623, 5660090.756, 33.256})), Optional.of(EpsgCrs.of(25832, 7837))),
            Polygon.of(List.of(PositionList.of(Axes.XYZ, new double[]{280405.623, 5660088.454, 33.256, 280414.631, 5660088.454, 40.255, 280411.722, 5660088.454, 41.63, 280405.623, 5660088.454, 33.256})), Optional.of(EpsgCrs.of(25832, 7837))),
            Polygon.of(List.of(PositionList.of(Axes.XYZ, new double[]{280414.631, 5660090.756, 40.255, 280405.623, 5660090.756, 33.256, 280411.722, 5660090.756, 41.63, 280414.631, 5660090.756, 40.255})), Optional.of(EpsgCrs.of(25832, 7837))),
            Polygon.of(List.of(PositionList.of(Axes.XYZ, new double[]{280414.631, 5660088.454, 40.255, 280414.631, 5660090.756, 40.255, 280411.722, 5660090.756, 41.63, 280411.722, 5660088.454, 41.63, 280414.631, 5660088.454, 40.255})), Optional.of(EpsgCrs.of(25832, 7837))),
            Polygon.of(List.of(PositionList.of(Axes.XYZ, new double[]{280405.623, 5660090.756, 33.256, 280405.623, 5660088.454, 33.256, 280411.722, 5660088.454, 41.63, 280411.722, 5660090.756, 41.63, 280405.623, 5660090.756, 33.256})), Optional.of(EpsgCrs.of(25832, 7837))),
            Polygon.of(List.of(PositionList.of(Axes.XYZ, new double[]{280414.631, 5660090.756, 32.967, 280414.631, 5660088.454, 32.967, 280405.623, 5660088.454, 32.967, 280405.623, 5660090.756, 32.967, 280414.631, 5660090.756, 32.967})), Optional.of(EpsgCrs.of(25832, 7837)))
    ), true, Optional.of(EpsgCrs.of(25832, 7837)))

    Geometry lineString = LineString.of(PositionList.of(Axes.XY, new double[]{7.057928054476078,50.63513601039777,7.0578956161839566,50.63505803960611,7.057835848430494,50.634914370139455,7.05782906196574,50.63489545937661,7.057777084795553,50.634773109802616,7.05776080839667,50.634733975026734,7.057748443277749,50.63470425030612,7.057703498751942,50.63459621959617,7.057436411333425,50.63395416692074,7.057408893966178,50.63388824914786,7.057186172627912,50.63335260705927,7.057162614551697,50.63329597418199,7.057146223073395,50.633256567564125,7.057138670377067,50.63323841746362,7.057132147057133,50.633222739914466,7.057121121220901,50.63319622135714,7.057065257125814,50.633061907419446,7.057061590179375,50.63305309501921,7.057056328036381,50.63304044252281,7.057182156878148,50.63302163906967,7.057433373626749,50.63298683055485,7.057694631525688,50.63295062396423,7.057956016965466,50.63291440092757,7.058217274092136,50.63287819315517,7.05853776292711,50.63283184638599,7.058792469028133,50.632795015475885,7.059507762959998,50.63269359053825,7.059532072496988,50.63269014604841,7.059803482596178,50.63273184863184,7.060422582812404,50.63283450122587,7.060614025626841,50.632865525485826,7.060662026856614,50.632873304077684,7.0608814529715564,50.632908868106554,7.060907904833248,50.63291315791857,7.060918215802298,50.63291483157564,7.06112740162063,50.6329487316522,7.061235864662819,50.632966312590916,7.061360496998691,50.632986509990324,7.061473315942731,50.633004774799566,7.061630203656994,50.63303016763404,7.06181363992173,50.63302450477376,7.0618402457793445,50.63302367930942,7.061841545850949,50.633012701193366,7.061849030482673,50.63294969635034,7.061932750764372,50.63294516224932,7.06225886797521,50.63292761696623,7.0624684966928,50.632916380759,7.062560619576899,50.63291143733471,7.062615921562667,50.63290847171516,7.062691348734309,50.632904428719556,7.0627603698389905,50.632900728838386,7.062872320345851,50.632894720841946,7.062937712966218,50.632891221341275,7.0630672233622445,50.63288427298366,7.063171559802741,50.632878407910894,7.063372856831195,50.63286756219094,7.063604229103734,50.632855426276315,7.063652974216848,50.63287367610047,7.064463521871149,50.633157994774095,7.065269397101759,50.63343579937497,7.0681083260376685,50.63443503854345,7.068431626625671,50.63454882346055,7.068551629083087,50.634591061734106,7.0685188265307985,50.6346657531453,7.068546458280658,50.63467579898681,7.068634091561662,50.63470765194964,7.068822337489679,50.634776960301316,7.069584695874838,50.635058852010985,7.071660937666402,50.63582151733066,7.072093822657506,50.635966615499534,7.0725058114447314,50.63610471067144,7.072572590313507,50.6361265289555,7.073614503222757,50.63656064767421,7.073730314763123,50.6366105011522,7.075201219151494,50.63722165030901,7.075364741451611,50.63828086525045,7.074708099331595,50.639534118777235,7.074781584898711,50.6399373762326,7.074845007643879,50.64014044869675,7.074852987123253,50.6401659977464,7.074850709725424,50.640212378385876,7.074847124566556,50.64028556665432,7.0749505099445456,50.64067988332235,7.075185600689913,50.64118229904168,7.075443286881516,50.641502220613646,7.075530246060963,50.64161019170784,7.075562460349464,50.64164703285461,7.075581931869189,50.64166930898765,7.076001530978904,50.642149227757244,7.076921616118111,50.642806343297444,7.078535546030282,50.643462827988095,7.080537270483809,50.644264782142876,7.081723611148593,50.644317637474145,7.081782819071316,50.64432082496364,7.08185830515211,50.64432616020953,7.081859328243689,50.644435103801946,7.081862043161164,50.64466018822534,7.0818660052139455,50.64488451968874,7.081867428596509,50.64496140613419,7.0818733711955035,50.64497907832349,7.081918497749628,50.645113400727816,7.0819761282356914,50.645284903452435,7.082021833855012,50.64542099817171,7.08203506819037,50.64546038507527,7.082080722722508,50.645548765584095,7.082146270002895,50.645676291813714,7.082209651330376,50.64580074236219,7.082360826999373,50.64609730884822,7.08242472315844,50.646123678838116,7.08252697302827,50.646165897993676,7.082579419541718,50.64618755544045,7.0828989650226575,50.64632029589963,7.0829735076451925,50.6463516705824,7.083218747954329,50.64645489214657,7.0835388147310665,50.646595419237485,7.083563449867986,50.6466258195965,7.0838818773048855,50.64677018619273,7.0843326875449995,50.64697456950342,7.0859163540829435,50.64769703525287,7.087076570147446,50.64823335670342,7.0871667545296155,50.648240935487046,7.087178786075601,50.648271748696,7.087266798971656,50.64849718094748,7.087380927517295,50.64878946273987,7.087402005391248,50.648843449139015,7.0874047213072595,50.64885041912493,7.088422734745507,50.648718825582044,7.088900327194576,50.64907255339361,7.089046355708853,50.64918070954098,7.089068682951456,50.649194198057835,7.089217171539349,50.6492839296155,7.089374346077922,50.64937890304377,7.089511844962337,50.64946198727885,7.090941347831857,50.65032575951528,7.091029279562259,50.65037889802892,7.091252562843545,50.65051380627236,7.091564503982092,50.650629893962424,7.091775991371385,50.65070860221357,7.092509659610175,50.6509816415371,7.0933210349795734,50.651283586600876,7.093330609924263,50.65128714304549,7.093340170368887,50.65129070824601,7.093387068228257,50.6513081596754,7.093452781112877,50.65133261054699,7.094053365865466,50.65146463041996,7.094399869717846,50.65154080282182,7.0945048809543785,50.65160448020585,7.094640132828197,50.651686487209446,7.094729292833957,50.65174055136551,7.095223867914051,50.65204043142702,7.095259024372927,50.652061746418056,7.095855389886946,50.65242334094179,7.096100636032134,50.65262934555984,7.096562427817203,50.653017248023986,7.096723202342989,50.65315227549222,7.0967401009236495,50.65316646529219,7.097052702241216,50.65340664814775,7.097057299060856,50.653410176931274,7.097244597650598,50.6535540912664,7.097537513693461,50.653779138141154,7.097597669920257,50.653825351326155,7.098668879709533,50.65521754501984,7.0994558722367245,50.65574808982328,7.099509202944912,50.65578404540431,7.099714097711306,50.655922171715794,7.0999551021189635,50.65610162039637,7.100160999651603,50.656209704309795,7.101151218151685,50.65670223282018,7.101154338945872,50.65670378568224,7.101263997940497,50.656758322708505,7.10192157059178,50.65701617474947,7.1020099746023995,50.65705083881004,7.102787659144278,50.657353750820434,7.103629285802354,50.65767965272372,7.10364351980361,50.65766946037407,7.103693056339817,50.657633948927966,7.103711852205294,50.657641171241174,7.104010449245635,50.6578498528389,7.104160518062858,50.65797022417825,7.104327492440197,50.658183436558815,7.1049329834034545,50.658996441402174,7.105199703702389,50.65936571965687,7.1053723260985135,50.659593169843205,7.1053796822188655,50.659600943352885,7.105402294666107,50.65958683974461,7.106655461912778,50.658805271716375,7.107752478602826,50.65846941466292,7.107755882107808,50.658473094518776,7.10782527494457,50.658435286578275,7.107829405896461,50.65843494893981,7.108013145497923,50.65849163601722,7.10809340397503,50.65848975547111,7.108260872222386,50.658440471590225,7.108297701590846,50.65837570129218,7.108302844969469,50.65837411192346,7.108413952171776,50.65839713273171,7.108477322316241,50.65839651569333,7.108525215224804,50.65840078291452,7.108547126978696,50.65842450503045,7.108703433499266,50.65841988332729,7.108785603904083,50.658410910104315,7.108788974866401,50.658408005802706,7.108781090859608,50.65836933858766,7.10881604810572,50.65834093640572,7.108825988513762,50.65829108220031,7.10886634442705,50.65827304776457,7.10907999645022,50.65824834643106,7.10915919147355,50.658200011937225,7.109165101542441,50.65820011684932,7.109187151614044,50.65821511692172,7.109241831202379,50.65821562657802,7.109261518160069,50.65823274684218,7.109302099978756,50.658234799495396,7.109316715476537,50.65818337521969,7.10932244496805,50.65818128266053,7.10944865141014,50.65821094223959,7.109528766196078,50.658219320514085,7.10959956085254,50.658184259448866,7.109706043743556,50.65817304482944,7.109730520066626,50.658203032169546,7.109836825320723,50.658193775237436,7.109878095493546,50.65818150244338,7.109911723160994,50.65820134909049,7.109984447771394,50.65818164485546,7.109968873588296,50.658155822298305,7.1100374304821505,50.658126444841514,7.110076136038664,50.65813998808483,7.1100992218499215,50.658138006150786,7.110127498683295,50.65811491858599,7.11018393360558,50.658115051544925,7.110202325276207,50.65814435547724,7.110234321009094,50.65811110204756,7.110278742719548,50.658128524409676,7.110311352424164,50.658151880071976,7.110419040275575,50.658122624422184,7.11052000581661,50.65811138253294,7.110548536255591,50.658065049526435,7.110608293165253,50.65804516157861,7.110677379424221,50.65803642453583,7.110735263437732,50.65804381189194,7.110769284985262,50.65808064532255,7.110856898772649,50.65804635989622,7.110873342500099,50.658013150916794,7.110934788191113,50.65799418958437,7.110991643833374,50.6579612670834}), Optional.of(OgcCrs.CRS84))

    def 'minMax'() {
        given:

        when:
        double[][] minMax = solid.accept(new MinMaxDeriver())

        then:
        minMax[0][0] == Double.valueOf(280405.623)
        minMax[0][1] == Double.valueOf(5660088.454)
        minMax[0][2] == Double.valueOf(32.967)
        minMax[1][0] == Double.valueOf(280414.631)
        minMax[1][1] == Double.valueOf(5660090.756)
        minMax[1][2] == Double.valueOf(41.63)
    }

    def "minMax with empty geometry"() {
        given:
        Geometry geometry = Polygon.empty(Axes.XYZ)

        when:
        double[][] minMax = geometry.accept(new MinMaxDeriver())

        then:
        minMax == null
    }

    def "minMax with LineString"() {
        given:

        when:
        double[][] minMax = lineString.accept(new MinMaxDeriver())

        then:
        minMax[0][0] == Double.valueOf(7.057056328036381)
        minMax[0][1] == Double.valueOf(50.63269014604841)
        minMax[1][0] == Double.valueOf(7.110991643833374)
        minMax[1][1] == Double.valueOf(50.659600943352885)
    }

    def 'clampToEllipsoid'() {
        given:

        when:
        Geometry<?> clamped = solid.accept(new ClampToEllipsoid())
        double[][] minMax = clamped.accept(new MinMaxDeriver())

        then:
        clamped.getType() == GeometryType.POLYHEDRAL_SURFACE
        clamped instanceof PolyhedralSurface
        PolyhedralSurface polyhedralSurface = (PolyhedralSurface) clamped
        polyhedralSurface.getNumPolygons() == 9
        minMax[0][0] == Double.valueOf(280405.623)
        minMax[0][1] == Double.valueOf(5660088.454)
        minMax[0][2] == Double.valueOf(0)
        minMax[1][0] == Double.valueOf(280414.631)
        minMax[1][1] == Double.valueOf(5660090.756)
        BigDecimal.valueOf(minMax[1][2]).setScale(4, RoundingMode.HALF_UP) == 8.6630
    }

    def 'lower by 10m'() {
        given:

        when:
        Geometry<?> clamped = solid.accept(new ClampToEllipsoid(10))
        double[][] minMax = clamped.accept(new MinMaxDeriver())

        then:
        clamped.getType() == GeometryType.POLYHEDRAL_SURFACE
        clamped instanceof PolyhedralSurface
        PolyhedralSurface polyhedralSurface = (PolyhedralSurface) clamped
        polyhedralSurface.getNumPolygons() == 9
        minMax[0][0] == Double.valueOf(280405.623)
        minMax[0][1] == Double.valueOf(5660088.454)
        BigDecimal.valueOf(minMax[0][2]).setScale(4, RoundingMode.HALF_UP) == 22.9670
        minMax[1][0] == Double.valueOf(280414.631)
        minMax[1][1] == Double.valueOf(5660090.756)
        BigDecimal.valueOf(minMax[1][2]).setScale(4, RoundingMode.HALF_UP) == 31.6300
    }

    def "simplify WGS84 LineString, epsilon 0.0001"() {
        given:
        double[] coordinates = lineString.getValue().getCoordinates()

        when:
        double[] simplified = ImmutableSimplifyLine.of(Optional.empty(), 0.0001)
                .onCoordinates(coordinates, coordinates.length, 2, Optional.empty(), OptionalInt.of(2))
        double[][] minMax = LineString.of(PositionList.of(Axes.XY, simplified)).accept(new MinMaxDeriver())

        then:
        simplified.length == 66
        BigDecimal.valueOf(minMax[0][0]).setScale(6, RoundingMode.HALF_UP) == 7.057056
        BigDecimal.valueOf(minMax[0][1]).setScale(6, RoundingMode.HALF_UP) == 50.632690
        BigDecimal.valueOf(minMax[1][0]).setScale(6, RoundingMode.HALF_UP) == 7.110992
        BigDecimal.valueOf(minMax[1][1]).setScale(6, RoundingMode.HALF_UP) == 50.659601
    }

    def "simplify WGS84 LineString, epsilon 0.001"() {
        given:
        double[] coordinates = lineString.getValue().getCoordinates()

        when:
        double[] simplified = ImmutableSimplifyLine.of(Optional.empty(), 0.001)
                .onCoordinates(coordinates, coordinates.length, 2, Optional.empty(), OptionalInt.of(2))
        double[][] minMax = LineString.of(PositionList.of(Axes.XY, simplified)).accept(new MinMaxDeriver())

        then:
        simplified.length == 16
        BigDecimal.valueOf(minMax[0][0]).setScale(6, RoundingMode.HALF_UP) == 7.057056
        BigDecimal.valueOf(minMax[0][1]).setScale(6, RoundingMode.HALF_UP) == 50.632855
        BigDecimal.valueOf(minMax[1][0]).setScale(6, RoundingMode.HALF_UP) == 7.110992
        BigDecimal.valueOf(minMax[1][1]).setScale(6, RoundingMode.HALF_UP) == 50.659601
    }

    def "simplify WGS84 LineString, epsilon 0.01"() {
        given:
        double[] coordinates = lineString.getValue().getCoordinates()

        when:
        double[] simplified = ImmutableSimplifyLine.of(Optional.empty(), 0.01)
                .onCoordinates(coordinates, coordinates.length, 2, Optional.empty(), OptionalInt.of(2))
        double[][] minMax = LineString.of(PositionList.of(Axes.XY, simplified)).accept(new MinMaxDeriver())

        then:
        simplified.length == 4
        BigDecimal.valueOf(minMax[0][0]).setScale(6, RoundingMode.HALF_UP) == 7.057928
        BigDecimal.valueOf(minMax[0][1]).setScale(6, RoundingMode.HALF_UP) == 50.635136
        BigDecimal.valueOf(minMax[1][0]).setScale(6, RoundingMode.HALF_UP) == 7.110992
        BigDecimal.valueOf(minMax[1][1]).setScale(6, RoundingMode.HALF_UP) == 50.657961
    }

    def "simplify WGS84 LineString, epsilon 0.01, min 4 positions"() {
        given:
        double[] coordinates = lineString.getValue().getCoordinates()

        when:
        double[] simplified = ImmutableSimplifyLine.of(Optional.empty(), 0.01)
                .onCoordinates(coordinates, coordinates.length, 2, Optional.empty(), OptionalInt.of(4))
        double[][] minMax = LineString.of(PositionList.of(Axes.XY, simplified)).accept(new MinMaxDeriver())

        then:
        simplified.length == 18
        BigDecimal.valueOf(minMax[0][0]).setScale(6, RoundingMode.HALF_UP) == 7.057928
        BigDecimal.valueOf(minMax[0][1]).setScale(6, RoundingMode.HALF_UP) == 50.634435
        BigDecimal.valueOf(minMax[1][0]).setScale(6, RoundingMode.HALF_UP) == 7.110992
        BigDecimal.valueOf(minMax[1][1]).setScale(6, RoundingMode.HALF_UP) == 50.659601
    }
}
